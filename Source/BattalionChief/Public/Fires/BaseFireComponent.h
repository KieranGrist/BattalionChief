// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "Particles/ParticleSystemComponent.h"
#include "Components/AudioComponent.h"
#include "Components/BoxComponent.h"
#include "ExtinguisherTypes/BaseExtinguisherTypeComponent.h"
#include "Objects/BaseObjectActor.h"
#include "Logging/LogMacros.h"
#include "BaseFireActor.generated.h"

DECLARE_LOG_CATEGORY_EXTERN(LogFire, Log, All);

UCLASS()
class BATTALIONCHIEF_API UBaseFireComponent : public USceneComponent
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	UBaseFireComponent();

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	virtual void CalculateHeat();
	
	virtual void CalculateIntensity();

	virtual void CalculateSpreadRadius();

	virtual void CalculateSpreadRate();

	virtual void CalculateHealth();

	// Function to spread the fire
	virtual void Spread();

	// Function to simulate burning
	virtual void Burn();

	// Function called when the fire is hit by an object containing extinguisher info
	virtual void Extinguish(UBaseExtinguisherTypeComponent* InBaseExtinguisherTypeComponent);

	virtual void NotifyHit(class UPrimitiveComponent* MyComp, AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, const FHitResult& Hit) override;

	// Function to calculate damage to burning objects
	virtual float CalculateDamage();

	// ApplyDamage to burning objects
	virtual void ApplyDamage();

	// Function to update visual and audio effects
	void UpdateEffects();
	
	// Function to Attach the fire to its parent object
	void AttachToObject(ABaseObjectActor* InObjectActor);
protected:
	// Particle system for visual representation of fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	UParticleSystemComponent* FireParticles;

	// Audio component for fire sound effects
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	UAudioComponent* FireSound;

	// The object that is burning
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	ABaseObjectActor* BurningObject;

	// Extinguishers that deal damage and stop this fire, float represents extinguishing percentage
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TMap<TSubclassOf<UBaseExtinguisherTypeComponent>, float> HelpfulExtinguisherTypesMap;

	// Extinguishers that spread the fire 
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TMap<TSubclassOf<UBaseExtinguisherTypeComponent>, float> HinderingExtinguisherTypesMap;

	// The heat generated by the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Heat = 100.0f; 

	// The amount of smoke produced by the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TSubclassOf<class ASmoke> SmokeClass; 

	// The intensity of the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Intensity = 1.0f;

	// The radius within which the fire can spread
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float SpreadRadius = 100.0f; 

	// The rate at which the fire spreads
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float SpreadRate = 1.0f; 

	// The current health of the fire (used to determine if it should be extinguished)
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Health = 100.0f; 
};
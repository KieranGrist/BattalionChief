// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "Particles/ParticleSystemComponent.h"
#include "Components/AudioComponent.h"
#include "Components/ShapeComponent.h"
#include "Objects/BaseObjectActor.h"
#include "ExtinguisherTypes/BaseExtinguisherTypeComponent.h"
#include "BaseFireActor.generated.h"

UCLASS()
class BATTALIONCHIEF_API ABaseFireActor : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	ABaseFireActor();

	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Function to spread the fire
	virtual void Spread();

	// Function to simulate burning
	virtual void Burn();

	// Function to extinguish the fire
	virtual void Extinguish(UBaseExtinguisherTypeComponent* Extinguisher);

	// Function to calculate damage to burning objects
	UFUNCTION()
	virtual float CalculateDamage();

	// ApplyDamage to burning objects
	virtual void ApplyDamage();

	// Function to update visual and audio effects
	void UpdateEffects();

protected:
	// The object that is burning
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	ABaseObjectActor* BurningObject;

	// Extinguishers that deal damage and stop this fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TArray<TSubclassOf<UBaseExtinguisherTypeComponent>> HelpfulExtinguisherTypes;

	// Extinguishers that spread the fire 
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TArray<TSubclassOf<UBaseExtinguisherTypeComponent>> HinderingExtinguisherTypes;

	// The heat generated by the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Heat;

	// The amount of smoke produced by the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	TSubclassOf<class ASmoke> SmokeClass;

	// The intensity of the fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Intensity;

	// The radius within which the fire can spread
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float SpreadRadius;

	// The rate at which the fire spreads
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float SpreadRate;

	// The current health of the fire (used to determine if it should be extinguished)
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	float Health;

	// Hitbox for fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	UShapeComponent* HitBox;

	// Particle system for visual representation of fire
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	UParticleSystemComponent* FireParticles;

	// Audio component for fire sound effects
	UPROPERTY(EditAnywhere, Category = "Fire Properties")
	UAudioComponent* FireSound;
};